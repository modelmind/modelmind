[tool.poetry]
name = "modelmind"
version = "0.1.0"
description = "Building the most valid and reliable personality assessments"
authors = ["Bryan Djafer <yukky.bryan@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12.1"
fastapi = "^0.109.2"
uvicorn = "^0.27.1"
pydantic = "^2.6.1"
pydantic-settings = "^2.1.0"
google-cloud-firestore = "^2.14.0"
httpx = "^0.26.0"
typer = "^0.9.0"
ujson = "^5.9.0"
pyjwt = "^2.8.0"
shortuuid = "^1.0.13"
aiocache = "^0.12.2"
hkdf = "^0.0.3"
python-jose = "^3.3.0"
cryptography = "^42.0.8"
google-cloud-bigquery = {extras = ["opentelemetry"], version = "^3.25.0"}
opentelemetry-exporter-gcp-trace = "^1.6.0"
google-cloud-tasks = "^2.16.3"
google-cloud-error-reporting = "^1.11.1"
opentelemetry-exporter-gcp-monitoring = "^1.7.0a0"
opentelemetry-instrumentation-fastapi = "^0.49b2"
google-cloud-logging = "^3.11.3"
opentelemetry-propagator-gcp = "^1.7.0"
google-cloud-storage = "^2.18.2"


[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
mypy = "^1.8.0"
pre-commit = "^3.7.1"
mock-firestore = "^0.11.0"
pytest-cov = "^4.1.0"
ipykernel = "^6.29.2"
numpy = "^1.26.4"
cryptography = "^42.0.8"
hkdf = "^0.0.3"
python-jose = "^3.3.0"
ruff = "^0.8.0"



[tool.poetry.group.analytics.dependencies]
pandas = "^2.2.2"
scipy = "^1.14.0"
matplotlib = "^3.9.1.post1"
factor-analyzer = "^0.5.1"
girth = "^0.8.0"
seaborn = "^0.13.2"
mpld3 = "^0.5.10"

[tool.mypy]
ignore_missing_imports = true
plugins = "pydantic.mypy"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"



[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "tests/*",
]

line-length = 120
indent-width = 4

target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
